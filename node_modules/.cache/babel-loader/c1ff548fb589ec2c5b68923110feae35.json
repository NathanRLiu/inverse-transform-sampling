{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //f(y) = x\n//integral(f(y)) = 1/2 * x^2\n\nfunction functionIntegral(x) {\n  return 1 / 2 * x ** 2;\n}\n\nconst endBound = 1.414;\n\nfunction binarySearch(func, val, start, end) {\n  let left = start;\n  let right = end;\n\n  while (left < right) {\n    let center = left + (right - left) / 2;\n\n    if (center < val) {\n      left = center;\n    } else if (center > val) {\n      right = center;\n    } else {\n      return center;\n    }\n  }\n}\n\nvar results = {};\n\nconst Runner = () => {\n  _s();\n\n  const [results, setResults] = useState({});\n  const generatedNum = binarySearch(functionIntegral, Math.random(), 0, endBound);\n  tempResults = results;\n  let roundedNum = generatedNum.toFixed(1);\n\n  if (!(roundedNum in results)) {\n    tempResults[roundedNum] = 0;\n  }\n\n  tempResults[roundedNum] += 1;\n  setResults(tempResults);\n  return results;\n};\n\n_s(Runner, \"pLaGd3/HqihT9LJydx10sY2s9pk=\");\n\n_c = Runner;\nexport default Runner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Runner\");","map":{"version":3,"names":["React","useState","functionIntegral","x","endBound","binarySearch","func","val","start","end","left","right","center","results","Runner","setResults","generatedNum","Math","random","tempResults","roundedNum","toFixed"],"sources":["/home/nathanrliu/inverse-transform-sampling/src/Components/Runner.js"],"sourcesContent":["import React, {useState} from 'react';\n//f(y) = x\n//integral(f(y)) = 1/2 * x^2\nfunction functionIntegral(x){\n\treturn 1/2 * x**2;\n}\nconst endBound = 1.414;\nfunction binarySearch(func, val, start, end){\n\tlet left = start;\n\tlet right = end;\n\twhile (left < right){\n\t\tlet center = left + (right - left)/2;\n\t\tif (center < val){\n\t\t\tleft = center;\n\t\t}else if (center > val){\n\t\t\tright = center;\n\t\t}else{\n\t\t\treturn center;\n\t\t}\n\t}\n}\n\nvar results = {};\n\nconst Runner = ()=>{\n\tconst [results, setResults] = useState({});\n\tconst generatedNum = binarySearch(functionIntegral, Math.random(), 0, endBound);\n\ttempResults = results;\n\tlet roundedNum = generatedNum.toFixed(1);\n\tif (!(roundedNum in results)){\n\t\ttempResults[roundedNum] = 0;\n\t}\n\ttempResults[roundedNum] += 1;\n\tsetResults(tempResults);\n\treturn results;\n}\nexport default Runner;\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B,C,CACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,CAA1B,EAA4B;EAC3B,OAAO,IAAE,CAAF,GAAMA,CAAC,IAAE,CAAhB;AACA;;AACD,MAAMC,QAAQ,GAAG,KAAjB;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA4C;EAC3C,IAAIC,IAAI,GAAGF,KAAX;EACA,IAAIG,KAAK,GAAGF,GAAZ;;EACA,OAAOC,IAAI,GAAGC,KAAd,EAAoB;IACnB,IAAIC,MAAM,GAAGF,IAAI,GAAG,CAACC,KAAK,GAAGD,IAAT,IAAe,CAAnC;;IACA,IAAIE,MAAM,GAAGL,GAAb,EAAiB;MAChBG,IAAI,GAAGE,MAAP;IACA,CAFD,MAEM,IAAIA,MAAM,GAAGL,GAAb,EAAiB;MACtBI,KAAK,GAAGC,MAAR;IACA,CAFK,MAED;MACJ,OAAOA,MAAP;IACA;EACD;AACD;;AAED,IAAIC,OAAO,GAAG,EAAd;;AAEA,MAAMC,MAAM,GAAG,MAAI;EAAA;;EAClB,MAAM,CAACD,OAAD,EAAUE,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAMe,YAAY,GAAGX,YAAY,CAACH,gBAAD,EAAmBe,IAAI,CAACC,MAAL,EAAnB,EAAkC,CAAlC,EAAqCd,QAArC,CAAjC;EACAe,WAAW,GAAGN,OAAd;EACA,IAAIO,UAAU,GAAGJ,YAAY,CAACK,OAAb,CAAqB,CAArB,CAAjB;;EACA,IAAI,EAAED,UAAU,IAAIP,OAAhB,CAAJ,EAA6B;IAC5BM,WAAW,CAACC,UAAD,CAAX,GAA0B,CAA1B;EACA;;EACDD,WAAW,CAACC,UAAD,CAAX,IAA2B,CAA3B;EACAL,UAAU,CAACI,WAAD,CAAV;EACA,OAAON,OAAP;AACA,CAXD;;GAAMC,M;;KAAAA,M;AAYN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}